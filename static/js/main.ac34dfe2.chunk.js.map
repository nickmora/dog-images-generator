{"version":3,"sources":["media/Infinity-2.5s-357px.gif","_components/ImageCard.js","_components/HeaderBar.js","mainStyle.js","_components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","loadingImage","require","ImageCard","props","Grid","style","paddingTop","container","spacing","justify","Card","Paper","padding","item","xs","console","log","height","maxWidth","src","loading","image","alt","CardActions","sm","Button","onClick","reset","variant","color","fullWidth","id","disabled","HeaderBar","AppBar","position","Typography","mainStyle","makeStyles","Footer","marginTop","backgroundColor","textDecoration","cursor","classes","className","rel","href","target","App","useState","dogImage","setDogImage","setLoading","getImage","fetch","then","resp","json","data","message","useEffect","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"oMAAAA,EAAOC,QAAU,IAA0B,iD,4ICErCC,EAAeC,EAAQ,IAgEdC,EA/DG,SAACC,GAmBf,OACI,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,WAAY,KAAOC,WAAS,EAACC,QAAS,GAAIC,QAAQ,UAC7D,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAON,MAAO,CAAEO,QAAS,KACrB,kBAACR,EAAA,EAAD,CAAMS,MAAI,EAACC,GAAI,KAEPC,QAAQC,IAAI,sBACZ,kBAAC,WAAD,KACI,yBACIX,MAAO,CAAEY,OAAQ,OAAQC,SAAS,MAClCC,IAAMhB,EAAMiB,QAAwBpB,EAAdG,EAAMkB,MAC5BC,IAAI,6BAMxB,kBAACC,EAAA,EAAD,KACI,kBAACnB,EAAA,EAAD,CAAMS,MAAI,EAACC,GAAI,GAAIU,GAAI,GACnB,kBAACC,EAAA,EAAD,CACIC,QAASvB,EAAMwB,MACfC,QAAQ,YACRC,MAAM,UACNC,WAAS,GAJb,kBASJ,kBAAC1B,EAAA,EAAD,CAAMS,MAAI,EAACC,GAAI,GAAIU,GAAI,GACnB,kBAACC,EAAA,EAAD,CAEIM,GAAG,kBACHC,UAAQ,EACRF,WAAS,GAJb,uB,wBCtCTG,EAVG,WACd,OACI,kBAACC,EAAA,EAAD,CAAQC,SAAS,SAAS1B,QAAQ,UAC9B,kBAAC2B,EAAA,EAAD,CAAYR,QAAQ,MAApB,2B,QCuBGS,EA1BGC,aAAW,iBAAO,CAChCC,OAAQ,CACJC,UAAW,IACXC,gBAAiB,UACjBN,SAAU,SACV,MAAO,CACHN,MAAO,QAEX,WAAY,CACRA,MAAO,OACPa,eAAgB,OAChBC,OAAQ,QAEZ,cAAe,CACXd,MAAO,MACPc,OAAQ,QAEZ,kBAAmB,CACfd,MAAO,SAEX,qBAAsB,CAClBA,MAAO,cCJJU,EAhBA,WACX,IAAMK,EAAUP,IAChB,OACI,yBAAKQ,UAAaD,EAAQL,QACtB,kBAACH,EAAA,EAAD,CAAYR,QAAU,QAAQnB,QAAU,UAAxC,mCACoC,uBAAGqC,IAAM,sBAAsBC,KAAO,kBAAkBC,OAAS,UAAjE,YADpC,8DAGI,6BAHJ,iEAIkE,uBAAGF,IAAM,sBAAsBE,OAAS,SAASD,KAAO,oDAAxD,QAC9D,6BALJ,2CAM4C,uBAAGA,KAAO,+BAAV,UAN5C,6BAMwH,uBAAGD,IAAM,sBAAsBE,OAAS,SAASD,KAAO,2BAAxD,sBC0BrHE,MAjCf,WAAgB,IAAD,EACmBC,mBAAS,MAD5B,mBACNC,EADM,KACIC,EADJ,OAEiBF,oBAAS,GAF1B,mBAEN9B,EAFM,KAEGiC,EAFH,KAGPC,EAAW,WACfD,GAAW,GACXE,MAAM,2CACDC,MAAK,SAAAC,GAEJ,OAAOA,EAAKC,UAEbF,MAAK,SAACG,GAGL,OADAP,EAAYO,EAAKC,SACVP,GAAW,OAS1B,OALAQ,qBAAU,WACJV,GACFG,MAED,CAACH,IAEF,yBAAKN,UAAU,OACb,kBAAC,EAAD,MACA,kBAACiB,EAAA,EAAD,KACE,kBAAC,EAAD,CAAW1C,QAAWA,EAASC,MAAO8B,EAAUxB,MAAO2B,KAEzD,kBAAC,EAAD,QCvBcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhE,QAAQgE,MAAMA,EAAMnB,c","file":"static/js/main.ac34dfe2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Infinity-2.5s-357px.8ca07674.gif\";","import React, { Fragment } from 'react';\nimport { Card, CardActions, Button, Grid, Paper } from \"@material-ui/core\";\nconst loadingImage = require(\"../media/Infinity-2.5s-357px.gif\")\nconst ImageCard = (props) => {\n    //     const downloadImage = () =>{\n    //         console.log(props.image)\n    //         fetch(props.image,{\n    //             mode: \"no_cors\"\n    //         })\n    //             .then(resp=>console.log(resp)) \n    //         //     .then(resp => resp.ok ? resp.blob() : console.log(\"network response was not OK\", resp))\n    //         //     .then(dogImage =>{\n    //         //         console.log(dogImage)\n    //         //         debugger;\n    //         //         const url = window.URL.createObjectURL(dogImage)\n    //         //         const link = document.createElement(\"a\");\n    //         //         link.href = url;\n    //         //         link.setAttribute('download', 'happy_dog.jpg');\n    //         //         document.getElementById(\"download-button\").appendChild(link)\n    //         //         link.click();\n    //         //     })\n    //     }\n    return (\n        <Grid style={{ paddingTop: 150 }} container spacing={10} justify=\"center\">\n            <Card>\n                <Paper style={{ padding: 15 }}>\n                    <Grid item xs={12}>\n                        {\n                            console.log(\"rendering image...\"),\n                            <Fragment>\n                                <img\n                                    style={{ height: \"100%\", maxWidth:1250 }}\n                                    src={!props.loading ? props.image : loadingImage }\n                                    alt=\"A joyous looking dog\"\n                                />\n                            </Fragment>\n                        }\n                    </Grid>\n                </Paper>\n                <CardActions>\n                    <Grid item xs={12} sm={6}>\n                        <Button\n                            onClick={props.reset}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            fullWidth\n                        >\n                            See a New Dog\n                        </Button>\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                        <Button\n                            // onClick={downloadImage} \n                            id=\"download-button\"\n                            disabled\n                            fullWidth\n                        >\n                            Download Image\n                        </Button>\n                    </Grid>\n                </CardActions>\n            </Card>\n        </Grid>\n    );\n}\n\nexport default ImageCard;","import React from 'react';\nimport { AppBar, Typography } from '@material-ui/core';\n\nconst HeaderBar = () => {\n    return (\n        <AppBar position=\"static\" justify=\"center\">\n            <Typography variant=\"h3\">\n                Dog Images Generator!\n            </Typography>\n        </AppBar>\n    );\n}\n\nexport default HeaderBar;","import { makeStyles } from \"@material-ui/styles\";\n\n\nconst mainStyle = makeStyles(() => ({\n    Footer: {\n        marginTop: 200,\n        backgroundColor: \"#3f51b5\",\n        position: \"static\",\n        \"& p\": {\n            color: \"#fff\"\n        },\n        \"& a:link\": {\n            color: \"pink\",\n            textDecoration: \"none\",\n            cursor: \"auto\",\n        },\n        \"& a:visited\": {\n            color: \"red\",\n            cursor: \"auto\",\n        },\n        \"& a:link:active\": {\n            color: \"black\",\n        },\n        \"& a:visited:active\": {\n            color: \"black\",\n        }\n    }\n}))\n\nexport default mainStyle","import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport mainStyle from '../mainStyle';\n\nconst Footer = () => {\n    const classes = mainStyle();\n    return (\n        <div className = {classes.Footer}>\n            <Typography variant = \"body2\" justify = \"center\" >\n                All images used courtesy of the <a rel = \"noopener noreferrer\" href = \"https://dog.ceo\" target = \"_blank\">Dogs API</a>;\n                as such, images are subject to copyright were applicable.\n                <br />\n                This app was built by Nick Morales, check out the source code <a rel = \"noopener noreferrer\" target = \"_blank\" href = \"https://github.com/nickmora/dog-images-generator\">here</a>\n                <br />\n                To see more neat projects, check out my <a href = \"https://github.com/nickmora\">GitHub</a> or check out my website: <a rel = \"noopener noreferrer\" target = \"_blank\" href = \"https://nickmorales.dev\">NickMorales.dev</a>\n            </Typography>\n        </div>\n    );\n}\n\nexport default Footer;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ImageCard from './_components/ImageCard';\nimport { Container} from '@material-ui/core';\nimport HeaderBar from './_components/HeaderBar';\nimport Footer from './_components/Footer';\n\nfunction App() {\n  const [dogImage, setDogImage] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const getImage = () =>{\n    setLoading(true)\n    fetch(\"https://dog.ceo/api/breeds/image/random\")\n        .then(resp => {\n          // console.log(resp);\n          return resp.json();\n        })\n        .then((data) => {\n          // console.log(data);\n          setDogImage(data.message) \n          return setLoading(false);\n        })\n        \n  }\n  useEffect(() => {\n    if(!dogImage) {\n      getImage();\n    }\n  }, [dogImage])\n  return (\n    <div className=\"App\">\n      <HeaderBar />\n      <Container>\n        <ImageCard loading = {loading} image={dogImage} reset={getImage} />\n      </Container>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}